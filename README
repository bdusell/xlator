==== DESCRIPTION ====

This project is a natural language translator based on context free grammars.
Although the parsing and translation algorithms currently used in this program
were conceived independently (and somewhat naively) by the author, it closely
resembles a very simple implementation of the concepts of a Chomskyan
transformational grammar, except that transformations are used to mutate parse
trees from an input language into those of an output language instead of
mapping them to a deep structure.

The program is currently in a working state, and if you have the patience to
learn what this program is all about and are fond of Chomskyan linguistics, I
encourage you try your hand at writing your own grammar/translation file pairs
and develop your own powerful natural language processor. The syntax and
mechanics of these files should be fairly easy to understand given the
examples. Maybe you could get it do you your homework for you. ;)

==== BUILDING ====

The Makefile builds two executables: xlator and xlator-debug. The latter is a
version of the program compiled with all sorts of debug flags and output turned
on and lets you take a peek at what's going on under the hood. The regular
xlator program is far more taciturn and simply reads a line of output in the
input language and spits out all possible translations, one per line, of this
input string or else reports any errors encountered in the input or in the
program.

To build both targets:
    % (cd src && make)

==== EXAMPLE USAGE ====

The xlator program accepts exactly two command line arguments: the first is a
grammar file which specifies what strings of tokens are accepted by the input
language. The second is a translation files which specifies the rules used for
transforming pieces of parse tree in the input language to parse trees in the
output language. See the examples under test to get an idea of how these work.

The xlator program accepts a single line of input on stdin and, barring any
errors in the input files or the syntax of the input line, exhaustively prints
out all possible translations, one per line, to stdout.

The input string is read as a sequence of case-sensitive tokens, which are
delineated by white space. This tokenization method is currently not very
intelligent and does not even permit sentence capitalization (at least not
in a way that doesn't involve tweaking the input grammar in a ludricous way).

Examples:

English to Japanese:

    % ./bin/xlator test/a.gram.txt test/a.trans.txt
    the man sees the woman
    otoko no hito wa onna no hito o mimasu

English to Latin:

    % ./bin/xlator test/testgrammar1.txt test/testtranslator1.txt
    magister discipulum docet
    magister discipulam docet
    magister discipulum docet
    magister discipulam docet
    magister docet discipulum
    magister docet discipulam
    magister docet discipulum
    magister docet discipulam
    magistra discipulum docet
    magistra discipulam docet
    magistra discipulum docet
    magistra discipulam docet
    magistra docet discipulum
    magistra docet discipulam
    magistra docet discipulum
    magistra docet discipulam
    discipulum docet magister
    discipulum docet magistra
    discipulam docet magister
    discipulam docet magistra
    discipulum docet magister
    discipulum docet magistra
    discipulam docet magister
    discipulam docet magistra
    docet discipulum magister
    docet discipulum magistra
    docet discipulam magister
    docet discipulam magistra
    docet discipulum magister
    docet discipulum magistra
    docet discipulam magister
    docet discipulam magistra

